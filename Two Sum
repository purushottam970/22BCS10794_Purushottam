class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> numMap; // Stores {value, index}

        for (int i = 0; i < nums.size(); i++) {
            int complement = target - nums[i];

            // If complement exists in map, return indices
            if (numMap.find(complement) != numMap.end()) {
                return {numMap[complement], i};
            }

            numMap[nums[i]] = i; // Store current number with its index
        }

        return {}; // Should never reach here (problem guarantees a solution)
    }
};

